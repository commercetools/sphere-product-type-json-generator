// Generated by CoffeeScript 1.9.3
(function() {
  var Csv, JSZip, ProductTypeGenerator, Promise, SphereClient, _, argv, client, fs, package_json, readCsvAsync, writeFileAsync, zipFiles;

  _ = require('underscore');

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  Csv = require('csv');

  JSZip = require('jszip');

  ProductTypeGenerator = require('./product-type-generator');

  SphereClient = require('sphere-node-sdk').SphereClient;

  package_json = require('../package.json');

  argv = require('optimist').usage('Usage: $0 --types [CSV] --attributes [CSV] --target [folder] --retailer --zip --zipFileName [name] --projectKey [key] --clientId [id] --clientSecret [secret]').describe('types', 'path to CSV file describing product-type general info').describe('attributes', 'path to CSV file describing product-type attributes info').describe('target', 'target directory for generated product types JSON files').describe('withRetailer', 'whether to generate an extra file for master<->retailer support with a "mastersku" attribute or not').describe('zip', 'whether to zip the target folder or not').describe('zipFileName', 'the zipped file name (without extension)').describe('projectKey', 'your SPHERE.IO project-key').describe('clientId', 'your OAuth client id for the SPHERE.IO API').describe('clientSecret', 'your OAuth client secret for the SPHERE.IO API')["default"]('retailer', false)["default"]('zip', false)["default"]('zipFileName', 'generated-product-types').alias('types', 't').alias('attributes', 'a').alias('target', 'td').alias('withRetailer', 'r').boolean('withRetailer').boolean('zip').demand(['types', 'attributes', 'target']).argv;

  client = new SphereClient({
    config: {
      client_id: argv.clientId,
      client_secret: argv.clientSecret,
      project_key: argv.projectKey
    },
    user_agent: package_json.name + " - " + package_json.version
  });


  /*
  Reads a CSV file by given path and returns a promise for the result.
  @param {string} path The path of the CSV file.
  @return Promise of csv read result.
   */

  readCsvAsync = function(path) {
    return new Promise(function(resolve, reject) {
      return Csv().from.path(path, {
        columns: true,
        trim: true
      }).to.array(function(data, count) {
        return resolve(data);
      }).on('error', function(error) {
        return reject(error);
      });
    });
  };

  writeFileAsync = function(productTypeDefinition, target, prefix) {
    var fileName, prettified;
    if (prefix == null) {
      prefix = 'product-type';
    }
    prettified = JSON.stringify(productTypeDefinition, null, 2);
    fileName = target + "/" + prefix + "-" + productTypeDefinition['name'] + ".json";
    return fs.writeFileAsync(fileName, prettified, 'utf8');
  };

  zipFiles = function(path, filename) {
    var zip;
    zip = new JSZip();
    zip.folder('product-type-json');
    return fs.readdirAsync(path).then(function(allFiles) {
      var jsonFiles;
      jsonFiles = _.filter(allFiles, function(file) {
        return file.match(/\.json/);
      });
      return Promise.map(jsonFiles, function(file) {
        return zip.file("product-type-json/" + file, fs.readFileSync(path + "/" + file, 'utf8'));
      }).then(function() {
        var buffer;
        buffer = zip.generate({
          type: 'nodebuffer'
        });
        return fs.writeFileAsync(path + "/" + filename + ".zip", buffer, 'utf8');
      });
    });
  };

  console.log('About to read CSV files...');

  Promise.all([readCsvAsync(argv.types), readCsvAsync(argv.attributes)]).spread(function(types, attributes) {
    var generator;
    console.log('Running generator...');
    generator = new ProductTypeGenerator(client);
    return generator.run(types, attributes, argv.target, argv.withRetailer, client).then(function(result) {
      console.log('About to write files...');
      if (_.isEmpty(result.productTypes)) {
        return Promise.reject(new Error('We couldn\'t generate any file based on the given data. Please check your CSVs.'));
      } else {
        return Promise.map(result.productTypes, function(productType) {
          console.log("lalala");
          return writeFileAsync(productType, argv.target);
        }).then(function() {
          console.log("Generated " + (_.size(result.productTypes)) + " files for normal product-types");
          if (argv.withRetailer) {
            if (_.isEmpty(result.productTypesForRetailer)) {
              return Promise.reject(new Error('We couldn\'t generate any file for master<->retailer support based on the given data. Please check your CSVs.'));
            } else {
              return Promise.map(result.productTypesForRetailer, function(productType) {
                return writeFileAsync(productType, argv.target, 'retailer-product-type');
              }).then(function() {
                console.log("Generated " + (_.size(result.productTypesForRetailer)) + " files for retailer product-types");
                return Promise.resolve();
              });
            }
          } else {
            return Promise.resolve();
          }
        }).then(function() {
          console.log("Finished generating files, checking results in target folder: " + argv.target);
          return fs.readdirAsync(argv.target).then(function(files) {
            var jsonFiles;
            jsonFiles = _.filter(files, function(file) {
              return file.match(/\.json/);
            });
            if (_.isEmpty(jsonFiles)) {
              return Promise.reject("No files were written in target folder " + argv.target);
            } else {
              console.log("Found " + (_.size(jsonFiles)) + " files in target folder " + argv.target);
              if (argv.zip) {
                console.log("Zipping files as " + argv.zipFileName + " name");
                return zipFiles(argv.target, argv.zipFileName);
              } else {
                return Promise.resolve();
              }
            }
          })["catch"](function(e) {
            console.error("Oops, there was an error reading the files in target folder " + argv.target + ": " + e.message);
            return process.exit(1);
          });
        }).then(function() {
          console.log('Execution successfully finished');
          return process.exit(0);
        });
      }
    })["catch"](function(e) {
      return console.error("Oops, something went wrong: " + e.message);
    });
  })["catch"](function(e) {
    return console.error("Could not read CSV files: " + e.message);
  }).done();

}).call(this);

//# sourceMappingURL=run.js.map
